//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace CovidonusV2.Swag
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StateWiseData>> CountsAsync(bool? isRefresh = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Resource>> ResourceAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CovidNews> NewsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InfoGraphic>> InfoGraphicsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Client : CovidonusV2.Swag.CovidBaseClient, IClient
    {
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;
    
        public Client(string baseUrl)
        {
            BaseUrl = baseUrl;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }
    
        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StateWiseData>> CountsAsync(bool? isRefresh = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Covid/Counts?");
            if (isRefresh != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isRefresh") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isRefresh, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StateWiseData>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Resource>> ResourceAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Covid/Resource");
    
            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Resource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CovidNews> NewsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Covid/News");
    
            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CovidNews>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InfoGraphic>> InfoGraphicsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Covid/InfoGraphics");
    
            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InfoGraphic>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeltaData : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private int _confirmed;
        private int _deceased;
        private int _recovered;
    
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public int Confirmed
        {
            get { return _confirmed; }
            set
            {
                if (_confirmed != value)
                {
                    _confirmed = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("deceased")]
        public int Deceased
        {
            get { return _deceased; }
            set
            {
                if (_deceased != value)
                {
                    _deceased = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("recovered")]
        public int Recovered
        {
            get { return _recovered; }
            set
            {
                if (_recovered != value)
                {
                    _recovered = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DistrictWiseData : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private string _district;
        private string _notes;
        private int _active;
        private int _confirmed;
        private int _deceased;
        private int _recovered;
        private int _deltaId;
        private string _stateCode;
        private int _stateWiseDataId;
        private int _todayConfirmed;
        private int _todayDeaths;
        private int _todayRecovered;
        private int _todayTested;
        private string _population;
        private string _recoverRate;
        private string _deathRate;
        private System.DateTimeOffset? _todayUpdatedtime;
        private StateWiseData _stateWiseData;
        private DeltaData _delta;
    
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("district")]
        public string District
        {
            get { return _district; }
            set
            {
                if (_district != value)
                {
                    _district = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public int Active
        {
            get { return _active; }
            set
            {
                if (_active != value)
                {
                    _active = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public int Confirmed
        {
            get { return _confirmed; }
            set
            {
                if (_confirmed != value)
                {
                    _confirmed = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("deceased")]
        public int Deceased
        {
            get { return _deceased; }
            set
            {
                if (_deceased != value)
                {
                    _deceased = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("recovered")]
        public int Recovered
        {
            get { return _recovered; }
            set
            {
                if (_recovered != value)
                {
                    _recovered = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("deltaId")]
        public int DeltaId
        {
            get { return _deltaId; }
            set
            {
                if (_deltaId != value)
                {
                    _deltaId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("stateCode")]
        public string StateCode
        {
            get { return _stateCode; }
            set
            {
                if (_stateCode != value)
                {
                    _stateCode = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("stateWiseDataId")]
        public int StateWiseDataId
        {
            get { return _stateWiseDataId; }
            set
            {
                if (_stateWiseDataId != value)
                {
                    _stateWiseDataId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("todayConfirmed")]
        public int TodayConfirmed
        {
            get { return _todayConfirmed; }
            set
            {
                if (_todayConfirmed != value)
                {
                    _todayConfirmed = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("todayDeaths")]
        public int TodayDeaths
        {
            get { return _todayDeaths; }
            set
            {
                if (_todayDeaths != value)
                {
                    _todayDeaths = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("todayRecovered")]
        public int TodayRecovered
        {
            get { return _todayRecovered; }
            set
            {
                if (_todayRecovered != value)
                {
                    _todayRecovered = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("todayTested")]
        public int TodayTested
        {
            get { return _todayTested; }
            set
            {
                if (_todayTested != value)
                {
                    _todayTested = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("population")]
        public string Population
        {
            get { return _population; }
            set
            {
                if (_population != value)
                {
                    _population = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("recoverRate")]
        public string RecoverRate
        {
            get { return _recoverRate; }
            set
            {
                if (_recoverRate != value)
                {
                    _recoverRate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("deathRate")]
        public string DeathRate
        {
            get { return _deathRate; }
            set
            {
                if (_deathRate != value)
                {
                    _deathRate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("todayUpdatedtime")]
        public System.DateTimeOffset? TodayUpdatedtime
        {
            get { return _todayUpdatedtime; }
            set
            {
                if (_todayUpdatedtime != value)
                {
                    _todayUpdatedtime = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("stateWiseData")]
        public StateWiseData StateWiseData
        {
            get { return _stateWiseData; }
            set
            {
                if (_stateWiseData != value)
                {
                    _stateWiseData = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("delta")]
        public DeltaData Delta
        {
            get { return _delta; }
            set
            {
                if (_delta != value)
                {
                    _delta = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StateWiseData : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private string _state;
        private string _stateCode;
        private int _active;
        private int _confirmed;
        private int _deaths;
        private int _tested;
        private int _recovered;
        private int _deltaActive;
        private int _deltaConfirmed;
        private int _deltaDeaths;
        private int _deltaRecovered;
        private string _stateNotes;
        private System.DateTimeOffset? _lastUpdatedtime;
        private string _stateLogo;
        private int _todayConfirmed;
        private int _todayDeaths;
        private int _todayRecovered;
        private int _todayTested;
        private string _population;
        private string _testSource;
        private int _testPerMillion;
        private string _totalPositiveCases;
        private string _recoverRate;
        private string _deathRate;
        private string _whatsAppBot;
        private string _facebookBot;
        private string _ePassLink;
        private System.DateTimeOffset? _todayUpdatedtime;
        private System.Collections.Generic.ICollection<DistrictWiseData> _districtData;
    
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("stateCode")]
        public string StateCode
        {
            get { return _stateCode; }
            set
            {
                if (_stateCode != value)
                {
                    _stateCode = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public int Active
        {
            get { return _active; }
            set
            {
                if (_active != value)
                {
                    _active = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public int Confirmed
        {
            get { return _confirmed; }
            set
            {
                if (_confirmed != value)
                {
                    _confirmed = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("deaths")]
        public int Deaths
        {
            get { return _deaths; }
            set
            {
                if (_deaths != value)
                {
                    _deaths = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("tested")]
        public int Tested
        {
            get { return _tested; }
            set
            {
                if (_tested != value)
                {
                    _tested = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("recovered")]
        public int Recovered
        {
            get { return _recovered; }
            set
            {
                if (_recovered != value)
                {
                    _recovered = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("deltaActive")]
        public int DeltaActive
        {
            get { return _deltaActive; }
            set
            {
                if (_deltaActive != value)
                {
                    _deltaActive = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("deltaConfirmed")]
        public int DeltaConfirmed
        {
            get { return _deltaConfirmed; }
            set
            {
                if (_deltaConfirmed != value)
                {
                    _deltaConfirmed = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("deltaDeaths")]
        public int DeltaDeaths
        {
            get { return _deltaDeaths; }
            set
            {
                if (_deltaDeaths != value)
                {
                    _deltaDeaths = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("deltaRecovered")]
        public int DeltaRecovered
        {
            get { return _deltaRecovered; }
            set
            {
                if (_deltaRecovered != value)
                {
                    _deltaRecovered = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("stateNotes")]
        public string StateNotes
        {
            get { return _stateNotes; }
            set
            {
                if (_stateNotes != value)
                {
                    _stateNotes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("lastUpdatedtime")]
        public System.DateTimeOffset? LastUpdatedtime
        {
            get { return _lastUpdatedtime; }
            set
            {
                if (_lastUpdatedtime != value)
                {
                    _lastUpdatedtime = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("stateLogo")]
        public string StateLogo
        {
            get { return _stateLogo; }
            set
            {
                if (_stateLogo != value)
                {
                    _stateLogo = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("todayConfirmed")]
        public int TodayConfirmed
        {
            get { return _todayConfirmed; }
            set
            {
                if (_todayConfirmed != value)
                {
                    _todayConfirmed = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("todayDeaths")]
        public int TodayDeaths
        {
            get { return _todayDeaths; }
            set
            {
                if (_todayDeaths != value)
                {
                    _todayDeaths = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("todayRecovered")]
        public int TodayRecovered
        {
            get { return _todayRecovered; }
            set
            {
                if (_todayRecovered != value)
                {
                    _todayRecovered = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("todayTested")]
        public int TodayTested
        {
            get { return _todayTested; }
            set
            {
                if (_todayTested != value)
                {
                    _todayTested = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("population")]
        public string Population
        {
            get { return _population; }
            set
            {
                if (_population != value)
                {
                    _population = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("testSource")]
        public string TestSource
        {
            get { return _testSource; }
            set
            {
                if (_testSource != value)
                {
                    _testSource = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("testPerMillion")]
        public int TestPerMillion
        {
            get { return _testPerMillion; }
            set
            {
                if (_testPerMillion != value)
                {
                    _testPerMillion = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("totalPositiveCases")]
        public string TotalPositiveCases
        {
            get { return _totalPositiveCases; }
            set
            {
                if (_totalPositiveCases != value)
                {
                    _totalPositiveCases = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("recoverRate")]
        public string RecoverRate
        {
            get { return _recoverRate; }
            set
            {
                if (_recoverRate != value)
                {
                    _recoverRate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("deathRate")]
        public string DeathRate
        {
            get { return _deathRate; }
            set
            {
                if (_deathRate != value)
                {
                    _deathRate = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("whatsAppBot")]
        public string WhatsAppBot
        {
            get { return _whatsAppBot; }
            set
            {
                if (_whatsAppBot != value)
                {
                    _whatsAppBot = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("facebookBot")]
        public string FacebookBot
        {
            get { return _facebookBot; }
            set
            {
                if (_facebookBot != value)
                {
                    _facebookBot = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("ePassLink")]
        public string EPassLink
        {
            get { return _ePassLink; }
            set
            {
                if (_ePassLink != value)
                {
                    _ePassLink = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("todayUpdatedtime")]
        public System.DateTimeOffset? TodayUpdatedtime
        {
            get { return _todayUpdatedtime; }
            set
            {
                if (_todayUpdatedtime != value)
                {
                    _todayUpdatedtime = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("districtData")]
        public System.Collections.Generic.ICollection<DistrictWiseData> DistrictData
        {
            get { return _districtData; }
            set
            {
                if (_districtData != value)
                {
                    _districtData = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Resource : System.ComponentModel.INotifyPropertyChanged
    {
        private string _category;
        private string _city;
        private string _contact;
        private string _descriptionAndOrServiceProvided;
        private string _nameOfTheOrganisation;
        private string _phoneNumber;
        private string _recordid;
        private string _state;
    
        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string Category
        {
            get { return _category; }
            set
            {
                if (_category != value)
                {
                    _category = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("contact")]
        public string Contact
        {
            get { return _contact; }
            set
            {
                if (_contact != value)
                {
                    _contact = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("descriptionAndOrServiceProvided")]
        public string DescriptionAndOrServiceProvided
        {
            get { return _descriptionAndOrServiceProvided; }
            set
            {
                if (_descriptionAndOrServiceProvided != value)
                {
                    _descriptionAndOrServiceProvided = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("nameOfTheOrganisation")]
        public string NameOfTheOrganisation
        {
            get { return _nameOfTheOrganisation; }
            set
            {
                if (_nameOfTheOrganisation != value)
                {
                    _nameOfTheOrganisation = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber
        {
            get { return _phoneNumber; }
            set
            {
                if (_phoneNumber != value)
                {
                    _phoneNumber = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("recordid")]
        public string Recordid
        {
            get { return _recordid; }
            set
            {
                if (_recordid != value)
                {
                    _recordid = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Source : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _name;
    
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Article : System.ComponentModel.INotifyPropertyChanged
    {
        private Source _source;
        private string _author;
        private string _title;
        private string _description;
        private string _url;
        private string _urlToImage;
        private System.DateTimeOffset? _publishedAt;
        private string _content;
    
        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public Source Source
        {
            get { return _source; }
            set
            {
                if (_source != value)
                {
                    _source = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("author")]
        public string Author
        {
            get { return _author; }
            set
            {
                if (_author != value)
                {
                    _author = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("urlToImage")]
        public string UrlToImage
        {
            get { return _urlToImage; }
            set
            {
                if (_urlToImage != value)
                {
                    _urlToImage = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("publishedAt")]
        public System.DateTimeOffset? PublishedAt
        {
            get { return _publishedAt; }
            set
            {
                if (_publishedAt != value)
                {
                    _publishedAt = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("content")]
        public string Content
        {
            get { return _content; }
            set
            {
                if (_content != value)
                {
                    _content = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CovidNews : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResults;
        private System.Collections.Generic.ICollection<Article> _articles;
    
        [System.Text.Json.Serialization.JsonPropertyName("totalResults")]
        public int TotalResults
        {
            get { return _totalResults; }
            set
            {
                if (_totalResults != value)
                {
                    _totalResults = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("articles")]
        public System.Collections.Generic.ICollection<Article> Articles
        {
            get { return _articles; }
            set
            {
                if (_articles != value)
                {
                    _articles = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InfoGraphic : System.ComponentModel.INotifyPropertyChanged
    {
        private string _title;
        private string _description;
        private string _url;
        private string _urlToImage;
        private int _order;
        private string _type;
    
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("urlToImage")]
        public string UrlToImage
        {
            get { return _urlToImage; }
            set
            {
                if (_urlToImage != value)
                {
                    _urlToImage = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int Order
        {
            get { return _order; }
            set
            {
                if (_order != value)
                {
                    _order = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108